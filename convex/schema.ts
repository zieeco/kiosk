import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";
import { authTables } from "@convex-dev/auth/server";

const applicationTables = {
  residents: defineTable({
    name: v.string(),
    location: v.string(),
    dob: v.optional(v.string()),
    createdBy: v.id("users"),
    createdAt: v.number(),
  }),
  employees: defineTable({
    name: v.string(),
    email: v.optional(v.string()),
    workEmail: v.optional(v.string()),
    phone: v.optional(v.string()),
    role: v.optional(v.string()),
    locations: v.optional(v.array(v.string())),
    onboardedBy: v.optional(v.id("users")),
    onboardedAt: v.optional(v.number()),
    inviteToken: v.optional(v.string()),
    inviteExpiresAt: v.optional(v.number()),
    hasAcceptedInvite: v.optional(v.boolean()),
    invitedAt: v.optional(v.number()),
    inviteBounced: v.optional(v.boolean()),
    inviteResent: v.optional(v.number()),
    // Legacy fields
    createdBy: v.optional(v.id("users")),
    createdAt: v.optional(v.number()),
    updatedAt: v.optional(v.number()),
    invitedBy: v.optional(v.id("users")),
    employmentStatus: v.optional(v.string()),
  }),
  broadcasts: defineTable({
    message: v.string(),
    sentBy: v.id("users"),
    sentAt: v.number(),
  }),
  roles: defineTable({
    userId: v.id("users"),
    role: v.union(v.literal("admin"), v.literal("supervisor"), v.literal("staff")),
    locations: v.array(v.string()),
    teams: v.optional(v.array(v.string())),
  }).index("by_userId", ["userId"]),
  audit_logs: defineTable({
    userId: v.optional(v.id("users")),
    event: v.string(),
    timestamp: v.number(),
    deviceId: v.string(),
    location: v.string(),
    details: v.optional(v.string()),
  }).index("by_userId", ["userId"]),
  kiosks: defineTable({
    deviceId: v.string(),
    location: v.string(),
    active: v.boolean(),
    registeredAt: v.optional(v.number()),
    registeredBy: v.optional(v.id("users")),
  }).index("by_deviceId", ["deviceId"]),
  config: defineTable({
    complianceReminderTemplate: v.string(),
    guardianInviteTemplate: v.string(),
    alertWeekday: v.number(),
    alertHour: v.number(),
    alertMinute: v.number(),
    selfieEnforced: v.boolean(),
  }),
  isp: defineTable({
    residentId: v.id("residents"),
    published: v.boolean(),
    dueAt: v.optional(v.number()),
    createdAt: v.number(),
    version: v.optional(v.number()),
    goals: v.optional(v.array(v.string())),
    content: v.optional(v.string()),
  }).index("by_resident", ["residentId"]),
  fire_evac: defineTable({
    location: v.string(),
    version: v.number(),
    dueAt: v.number(),
    uploadedAt: v.number(),
    uploadedBy: v.id("users"),
  }).index("by_location", ["location"]),
  compliance_alerts: defineTable({
    type: v.union(v.literal("isp"), v.literal("fire_evac")),
    location: v.string(),
    dueAt: v.number(),
    active: v.boolean(),
    createdAt: v.number(),
    details: v.optional(v.string()),
    dismissedBy: v.optional(v.id("users")),
    dismissedAt: v.optional(v.number()),
  }).index("by_location", ["location"]),
  guardian_checklist_links: defineTable({
    residentId: v.id("residents"),
    templateId: v.id("guardian_checklist_templates"),
    location: v.string(),
    sentDate: v.number(),
    expiresAt: v.number(),
    completed: v.boolean(),
    expired: v.boolean(),
    token: v.string(),
  }),
  guardian_checklist_templates: defineTable({
    name: v.string(),
    description: v.optional(v.string()),
    createdAt: v.number(),
    createdBy: v.id("users"),
  }),
  resident_logs: defineTable({
    residentId: v.id("residents"),
    authorId: v.id("users"),
    version: v.number(),
    template: v.string(),
    content: v.string(),
    createdAt: v.number(),
  }).index("by_resident", ["residentId"]),
  isp_acknowledgments: defineTable({
    residentId: v.id("residents"),
    userId: v.id("users"),
    ispId: v.id("isp"),
    acknowledgedAt: v.number(),
    acknowledgedIsp: v.id("isp"),
  }).index("by_resident_and_user", ["residentId", "userId"]),
  hr_files: defineTable({
    userId: v.id("users"),
    filename: v.string(),
    storageId: v.id("_storage"),
    uploadedAt: v.number(),
    fileType: v.string(),
  }).index("by_userId", ["userId"]),
};

export default defineSchema({
  ...authTables,
  ...applicationTables,
});
